Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    ParallelWebCrawler profiler sums up time taken by parse method all threads.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

    Parallel web crawler implementation is based on fork-join pool "which gives optimized performance on multiprocessor cpu"

    on a single threaded "old personal computer"  parallel web crawler requires extra resources for threads resulting slower performance.
    While sequential web crawler needed only single thread and will outperform parallelwebcrawler on old system.


    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

         on multicore processor system parallel web crawler will perform better than sequential webcrawler.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

        Profiler class is implemented to record the performance of webCrawler application (in both sequential and parallel processing modes).


    (b) What are the join points of the Profiler in the web crawler program?

    ProfileId is the Foreign key relation / join point between profiler and webcrawler app.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    - Dependency Injection -
        Used in com/udacity/webcrawler/main/WebCrawlerMain.java and in com/udacity/webcrawler/profiler/ProfilerImpl.java
        This design pattern allows application dependencies injection at runtime, which is good for creating unit tests.
        At the same time using this requires too much of boiler plate code.

    Factory PAttern:-
        Used in PageParserFactory and PageParserFactoryImpl.
         Advantage:   Modular expandability of the application
         Disadvantage: High number of required classes

    - Proxy Pattern -
        Used in PrefilerImpl with Proxy.newProxyInstance.
    Proxy is a structural design pattern that provides an object that acts as a substitute for a real service object used by a client.
     A proxy receives client requests,performs some operations "like middleware" and then passes the request to a service object.